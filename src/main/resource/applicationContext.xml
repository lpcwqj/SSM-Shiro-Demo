<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
	   http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd
	   http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
	   http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
	   http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.0.xsd">

    <context:property-placeholder location="classpath:jdbc.properties"/>
    <context:component-scan base-package="dao,service,controller"/>
    <!-- dbcp数据库连接池 -->
    <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
        <property name="driverClassName" value="${jdbc.driver}" />
        <property name="url" value="${jdbc.url}" />
        <property name="username" value="${jdbc.username}" />
        <property name="password" value="${jdbc.password}" />
        <property name="maxActive" value="10" />
        <property name="maxIdle" value="5" />
    </bean>
    <!-- 配置SqlSessionFactory -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!-- 自动给该包下的实体起别名 用于resultType和parameterType和关联查询时的javaType和ofType命名(不区分大小写) -->
        <property name="typeAliasesPackage" value="beans"/>
        <!-- 配置数据源 -->
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <!-- mapper动态代理扫描开发 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!-- 自动寻找dataSource -->
        <!-- 批量加载mapper，要求使用mapper代理方法并且接口名和mapper.xml文件名相同 -->
        <property name="basePackage" value="dao"/>
    </bean>

    <!-- 事务管理器 -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <!-- 数据源 -->
        <property name="dataSource" ref="dataSource" />
    </bean>
    <!-- 开启注解AOP驱动 -->
    <tx:annotation-driven/>


    <!-- 1.配置shiro安全管理器 -->
    <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
        <property name="cacheManager" ref="cacheManager"/>
        <property name="realm" ref="jdbcRealm"/>
    </bean>

    <!-- 2.配置CacheManager  -->
    <bean id="cacheManager" class="org.apache.shiro.cache.MemoryConstrainedCacheManager" />

    <!-- 3.配置realm -->
    <bean id="jdbcRealm" class="realm.shiroRealm"/>

    <!-- 4.配置LifecycleBeanPostProcessor
         可以自动的调用 配置在spring IOC容器中的shiro bean的生命周期
         管理shiro中常见的对象
    -->
    <bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>

    <!-- 5.启用IOC容器中使用shiro的注解，
        但必须在配置了LifecycleBeanPostProcessor后才能使用
    -->
    <bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator" depends-on="lifecycleBeanPostProcessor"/>
    <bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
        <property name="securityManager" ref="securityManager"/>
    </bean>

    <!-- 6.配置shiroFilter
        id必须和web.xml中的filter-name一致
        如果web.xml中设置了初始化参数targetBeanName的value 则对应其value  ->  aaa
    -->
    <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
        <property name="securityManager" ref="securityManager"/>
        <property name="loginUrl" value="/jsp/login.jsp"/>
        <!--成功后的跳转页面在控制层已完成-->
        <!--<property name="successUrl" value="/jsp/home.jsp"/>-->
        <!--未受认证的跳转的页面-->
        <!--<property name="unauthorizedUrl" value=""/>-->
        <!--配置哪些页面需要受保护，以及访问这些页面的权限-->
        <property name="filterChainDefinitions">
            <value>
                <!--
                    anon 可以被匿名访问
                    authc 必须认证后(登录)才能访问的页面
                    logout 登出
                -->
                /js/** = anon
                /css/** = anon
                /login = anon
                /logout = logout
                <!--
                    /** = authc : 剩余其他路径，必须认证通过才可以访问
                    /** = user : 剩余其他路径，必须认证通过才可以访问，实现RememberMe的功能，前提是token中设置了该值为true
                                当再次打开浏览器时不必重新登录，原理：登录成功后浏览器存储一个名为rememberMe的cookie
                -->
                /** = user
            </value>
        </property>
    </bean>
</beans>